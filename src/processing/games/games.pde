/*******************************************
 *  ART 150 - Fall 2018 - Kevin Kowalski 
 *******************************************
 * - Super messy code glued together.
 *   Not enough time to optimize and polish
 *   all the features or graphics.
 *  
 * - Features a calibration test, simplified
 *   blackjack game, and gravity platformer
 *   created by someone on the Internet but
 *   ported by me.
 *******************************************/
 
import processing.serial.*;
Serial myPort;
String val = "start";
int arduino_val = 0;

char direction;
char blue_btn;
char black_btn;

boolean firstContact = false;

// game state 0 variables:
PImage menu_bg;
int game_state = 0;
Game calibrate = new Game(1, "Calibrate");
Game blackjack = new Game(2, "Blackjack");
Game platformer = new Game(3, "Gravity Platformer");
Game[] game_list = {calibrate, blackjack, platformer};  // list of enables games

int selection_y = height / 10 + 134;
int[] current_menu = {selection_y, selection_y + 96, selection_y + 192};
int menu_item = 0;

// game state 1 (calibrate) variables:
PImage calibrate_bg;

// game state 2 (blackjack) variables:
int[] cards = {0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10,  // clubs
               0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10,  // diamonds
               0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10,  // hearts
               0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10}; /// spades

// second deck needed or dealer and player cards will be identical when shuffled
int[] cards2 = {0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10,  // clubs
                0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10,  // diamonds
                0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10,  // hearts
                0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10}; /// spades
int[] shuffled_cards = shuffle(cards);
int[] shuffled_dealer_cards = shuffle(cards2);
int[] drawn_cards = {-1, -1, -1, -1, -1, -1, -1, -1, -1};
int current_card_index = 0;
int dealer = 0;
int dealer_card = -1;
int current_card = -1;
int current_val = 0;
boolean already_hit = false;
boolean game_reset = false;
boolean game_over = false;
int money = 1000;
int bet = 100;


// https://www.openprocessing.org/sketch/554613
// game state 3 (gravity platformer) variables:
int R_VAL = int(random(255));
int G_VAL = int(random(255));
int B_VAL = int(random(255));
PImage img;
/*
 1=start
 2=block
 3=goal
 4=death
 5=key Piece
 6=door
 7=bounce pad
 8=block to invis
 9=invis to block
 u=up gravity;
 r=right gravity
 d=down gravity
 l=left gravity
 g=gate (key required)
 k=key (used to open gate)
 h=slow block
 */

Player p;
int u=10;
int r=11;
int d=12;
int l=13;
int g=14;
int k=15;
int h=16;
int hitboxCheck=2;
int[][][] level= 
  {
  //lvl 0
  {
    {2, 2, 2, 2, 2, 2, 2}, 
    {2, 1, 0, 0, 0, 0, 2}, 
    {2, 2, 2, 2, 2, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 2, 2, 2, 2, 2}, 
    {2, 0, 0, 0, 0, 3, 2}, 
    {2, 2, 2, 2, 2, 2, 2}
  }, 
  //lvl 1
  {
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4}, 
    {4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4}, 
    {4, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 2, 4, 2, 4, 2, 2, 2, 2, 4}, 
    {4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {4, 2, 2, 2, 2, 2, 2, 4, 2, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4}, 
    {2, 0, 2, 4, 2, 4, 2, 2, 2, 2, 4}, 
    {4, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4}, 
    {4, 2, 2, 2, 2, 2, 2, 4, 2, 2, 4}
  }, 
  //lvl 2
  {
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
    {2, 5, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2}, 
    {2, 0, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2}, 
    {2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2}, 
    {2, 0, 2, 2, 5, 0, 0, 0, 0, 0, 5, 2}, 
    {2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2}, 
    {2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2}, 
    {2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2}, 
    {2, 0, 2, 2, 5, 0, 0, 5, 2, 2, 0, 2}, 
    {2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 6, 2}, 
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}
  }, 
  //lvl 3
  {
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
    {2, 4, 2, 4, 2, 5, 0, 0, 5, 2}, 
    {2, 0, 5, 0, 4, 0, 4, 4, 0, 2}, 
    {2, 0, 2, 0, 4, 0, 4, 4, 0, 2}, 
    {2, 0, 4, 0, 4, 0, 4, 4, 0, 2}, 
    {2, 0, 4, 0, 4, 0, 4, 4, 0, 2}, 
    {2, 0, 4, 0, 4, 0, 0, 6, 0, 2}, 
    {2, 0, 4, 0, 2, 2, 2, 2, 0, 2}, 
    {2, 1, 4, 0, 5, 0, 0, 0, 0, 2}, 
    {2, 2, 2, 4, 2, 4, 2, 2, 2, 2}
  }, 
  //lvl 4
  {
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
    {2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2}, 
    {2, 0, 2, 5, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2}, 
    {2, 0, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2}, 
    {2, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 2, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2, 0, 0, 2, 2, 0, 2}, 
    {2, 2, 2, 2, 2, 2, 5, 2, 5, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 2}, 
    {2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 2}, 
    {2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 5, 2, 0, 2, 2, 5, 2, 2}, 
    {2, 2, 5, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 5, 2, 5, 2}, 
    {2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2}, 
    {2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 5, 2, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 2, 0, 2, 5, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 0, 2, 5, 2, 0, 2}, 
    {2, 5, 2, 0, 0, 0, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 0, 2, 6, 2}, 
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}
  }, 
  //lvl 5
  {
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
    {2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2}, 
    {2, 2, 4, 5, 0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 2, 4, 0, 4, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 2, 4, 0, 4, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 2, 4, 0, 4, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 2, 4, 0, 4, 0, 4, 0, 0, 4, 0, 2, 2, 2, 2, 2, 2, 2, 5, 2}, 
    {2, 0, 0, 0, 0, 5, 2, 9, 9, 4, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2}, 
    {2, 0, 8, 8, 8, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2}, 
    {2, 0, 4, 0, 4, 5, 0, 2, 0, 4, 0, 2, 5, 2, 0, 0, 0, 2, 0, 2}, 
    {2, 0, 4, 0, 4, 0, 2, 0, 5, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2}, 
    {2, 0, 4, 0, 4, 0, 2, 0, 2, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 2, 0, 2, 2, 2, 2, 0, 2, 2}, 
    {2, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 2, 0, 0, 0, 2, 0, 0, 0, 2}, 
    {2, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 2, 0, 2, 0, 0, 0, 2, 0, 2}, 
    {2, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 2, 0, 0, 2, 2, 2, 2, 2, 2}, 
    {2, 5, 0, 0, 0, 0, 2, 0, 4, 0, 4, 2, 2, 0, 2, 5, 0, 0, 0, 2}, 
    {2, 2, 8, 8, 8, 2, 4, 0, 4, 0, 4, 2, 0, 0, 0, 2, 2, 0, 2, 2}, 
    {2, 1, 0, 0, 2, 2, 2, 0, 0, 5, 2, 2, 0, 2, 0, 0, 0, 0, 6, 2}, 
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}
  }, 
  //lvl 6
  {
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
    {2, r, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, d, 2}, 
    {2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2}, 
    {2, 0, 2, r, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, d, 2, 0, 2}, 
    {2, 0, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2}, 
    {2, 0, 2, 0, 2, r, 0, 0, 0, 0, 0, 0, 0, 5, d, 2, 0, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 0, 2, r, 0, 0, 0, 5, d, 2, 0, 2, 0, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 0, 2, 5, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 0, 2, 0, 2, r, d, 2, 0, 2, 0, 2, 0, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 0, 2, 0, 2, 5, 6, 2, 0, 2, 0, 2, 0, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 5, 2, 0, 2, 0, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 0, 2, 0, 2, u, 5, 0, l, 2, 0, 2, 0, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 5, 2, 0, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 0, 2, u, 5, 0, 0, 0, 0, 0, l, 2, 0, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 0, 2}, 
    {2, 0, 2, 0, 2, u, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, l, 2, 0, 2}, 
    {2, 1, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2}, 
    {2, u, 2, u, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, l, 2}, 
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}
  }, 
  //lvl 7
  {
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
    {2, 1, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2}, 
    {2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 0, 2, 0, 2, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2}, 
    {2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0, 2, 2, 0, 2}, 
    {2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2}, 
    {2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 2, 2, 0, 0, 2}, 
    {2, 2, 0, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 0, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
    {2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 2}, 
    {2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 0, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 2, 2, 2, 0, 2, 0, 0, 2, 0, 2, 2, 0, 2}, 
    {2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 2, 0, 2}, 
    {2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 0, 2, 0, 2}, 
    {2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 2, 0, 0, 2, 0, 2}, 
    {2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 2, 0, 2, 2, 0, 2}, 
    {2, 0, 0, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 2}, 
    {2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 2, 0, 2}, 
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2}, 
    {2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 0, 2, 0, 2}, 
    {2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 2, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 2}, 
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2}, 
    {2, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2}, 
    {2, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2}, 
    {2, 0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 2, 0, 0, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2}, 
    {2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2}, 
    {2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2}, 
    {2, 2, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 0, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2}, 
    {2, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2}, 
    {2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2}, 
    {2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 2, 2, 0, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2}, 
    {2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2}, 
    {2, 0, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 2, 0, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2}, 
    {2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 2, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2}, 
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
  }, 
  //lvl 8
  {
    {2, 2, h, h, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
    {2, 0, r, 0, 0, d, h, 0, h, h, 0, 2, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, k, 2}, 
    {2, 0, 0, h, d, k, 0, 0, 0, l, 0, 2, 0, 7, 7, 7, 7, 7, 0, 7, 0, 7, 7, 7, 2}, 
    {2, h, 0, h, 0, 0, h, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 2}, 
    {2, h, u, 0, l, r, 0, d, h, 0, 0, 2, 7, 7, 7, 7, 0, 7, 0, 7, 7, 7, 7, 0, 2}, 
    {2, h, h, h, h, h, h, 0, h, 0, h, 2, 0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 7, 0, 2}, 
    {2, r, 0, 0, 0, 0, 0, 0, 0, u, h, 2, 0, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 0, 2}, 
    {2, 0, d, 0, 0, 0, 0, l, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 7, 0, 2}, 
    {2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 0, 7, 0, 7, 7, 7, 7, 7, 7, 0, 2}, 
    {2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
    {2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 1, 0, g, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2}, 
    {2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
    {2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, 0, 0, 0, h, 0, 0, 0, h, k, 2}, 
    {2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 2}, 
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 2}, 
    {2, 4, h, h, h, 4, h, h, h, 4, 0, 2, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 2}, 
    {2, k, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 2}, 
    {2, h, h, 4, h, h, h, 4, h, h, h, 2, h, 0, 0, 0, h, 0, 0, 0, h, 0, 0, 0, h}, 
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
  }, 
  //lvl 9
  {
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
    {2, 1, l, l, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, l, l, l, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2}, 
    {2, l, l, l, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2}, 
    {2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2}, 
    {2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2}, 
    {2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2}, 
    {2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2}, 
    {2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2}, 
    {2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2}, 
    {2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2}, 
    {2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2}, 
    {2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2}, 
    {2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2}, 
    {2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2}, 
    {2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2}, 
    {2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 3, 2}, 
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
  }, 
  //lvl 10
  {
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, h, h, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
    {2, 0, 0, h, d, 0, 0, 0, 0, 0, 0, 0, l, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, r, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, d, h, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, 0, 2}, 
    {2, h, h, 0, 0, 0, 0, 0, 0, 0, 0, h, u, 0, 0, 0, 0, 0, 0, 0, 0, 0, l, 0, 2}, 
    {2, r, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, d, h, 0, 0, 2}, 
    {h, 0, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, h, 0, 0, 2}, 
    {h, u, l, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 2, u, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, 0, 0, 0, 0, 4, 4}, 
    {2, 1, r, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r, 0, 0, 0, 0, 0, 6, 4}, 
    {2, 2, d, h, 0, 0, 0, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4}, 
    {2, h, r, 0, 0, 0, u, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, 0, 0, 0, 0, 0, 2}, 
    {2, r, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, u, h, 0, 0, 0, 0, h, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r, 5, u, h, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {h, u, 0, 5, l, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 2, 2, h, h, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
  }, 
  //lvl 11
  {
    {4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2}, 
    {4, 0, 1, 0, 4, 0, 9, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {4, 0, 8, 0, 4, 9, 0, 9, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {4, 0, 0, 0, 4, 0, 9, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {4, 0, 0, 0, 4, 9, 0, 9, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 4, 2}, 
    {2, 4, 0, 0, 0, 4, 9, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 4, 2}, 
    {2, 4, 0, 0, 0, 4, 0, 9, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {2, 4, 0, 0, 0, 4, 9, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {2, 7, 4, 0, 0, 0, 4, 9, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 2}, 
    {2, 0, 4, 0, 0, 0, 4, 0, 2, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 4, 2}, 
    {2, 7, 0, 4, 0, 0, 0, 4, 2, 2, 2, 2, 0, 7, 0, 4, 4, 0, 0, 0, 0, l, 0, 4, 2}, 
    {2, 0, 7, 4, 0, 0, 0, 4, 4, 0, 0, 3, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {2, 7, 0, 7, 4, 0, 0, 0, 4, 0, 0, u, 2, 7, 4, 0, 0, 0, 0, 0, 0, 0, 4, 8, 2}, 
    {2, 0, 7, 0, 7, 4, 0, 0, 0, 4, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2}, 
    {2, 7, 0, 7, 0, 4, 0, 0, 0, 4, 0, 0, 2, 7, 4, 0, 0, 0, 0, 0, 0, 0, 4, 8, 2}, 
    {2, 0, 7, 0, 7, 4, 0, 0, 0, 4, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 4, 8, 0, 2}, 
    {2, 7, 0, 7, 0, 4, 0, 0, 0, 4, 0, 0, 4, 7, 4, 0, 0, 0, 0, 0, 0, 4, 0, 8, 2}, 
    {2, 0, 7, 0, 7, 4, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 8, 0, 2}, 
    {2, 7, 0, 7, 0, 4, 0, 0, 0, 0, 0, 0, 4, 7, 4, 0, 0, 0, 0, 0, 4, 8, 0, 8, 2}, 
    {2, 0, 7, 0, 7, 4, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 4, 8, 0, 8, 0, 2}, 
    {2, 7, 0, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 7, 4, 0, 0, 0, 0, 4, 0, 8, 0, 8, 2}, 
    {2, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 4, 0, 0, 0, 0, 4, 8, 0, 8, 0, 2}, 
    {2, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 4, 0, d, 0, 4, 8, 0, 8, 0, 8, 2}, 
    {2, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 4, 0, 0, 0, 4, 0, 8, 0, 8, 0, 2}, 
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
  }, 
  //lvl 12
  {
    {4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2}, 
    {4, 0, 0, 0, 4, 0, 9, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {4, 0, 0, 0, 4, 9, 0, 9, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {4, 0, 0, 0, 4, 0, 9, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {4, 0, 0, 0, 4, 9, 0, 9, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 4, 2}, 
    {2, 4, 0, 0, 0, 4, 9, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 4, 2}, 
    {2, 4, 0, 0, 0, 4, 0, 9, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {2, 4, 0, 0, 0, 4, 9, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {2, 7, 4, 0, 0, 0, 4, 9, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 0, 4, 2}, 
    {2, 0, 4, 0, 0, 0, 4, 0, 2, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 4, 2}, 
    {2, 7, 0, 4, 0, 0, 0, 4, 2, 0, 0, 2, 0, 7, 0, 4, 4, 0, 0, 0, 0, l, 0, 4, 2}, 
    {2, 0, 7, 4, 0, 0, 0, 4, 4, 0, 0, 1, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {2, 7, 0, 7, 4, 0, 0, 0, 4, 0, 0, u, 2, 7, 4, 0, 0, 0, 0, 0, 0, 0, 4, 8, 2}, 
    {2, 0, 7, 0, 7, 4, 0, 0, 0, 4, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2}, 
    {2, 7, 0, 7, 0, 4, 0, 0, 0, 4, 0, 0, 2, 7, 4, 0, 0, 0, 0, 0, 0, 0, 4, 8, 2}, 
    {2, 0, 7, 0, 7, 4, 0, 0, 0, 4, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 4, 8, 0, 2}, 
    {2, 7, 0, 7, 0, 4, 0, 0, 0, 4, 0, 0, 4, 7, 4, 0, 0, 0, 0, 0, 0, 4, 0, 8, 2}, 
    {2, 0, 7, 0, 7, 4, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 8, 0, 2}, 
    {2, 7, 0, 7, 0, 4, 0, 0, 0, 0, 0, 0, 4, 7, 4, 0, 0, 0, 0, 0, 4, 8, 0, 8, 2}, 
    {2, 0, 7, 0, 7, 4, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 4, 8, 0, 8, 0, 2}, 
    {2, 7, 0, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 7, 4, 0, 0, 0, 0, 4, 0, 8, 0, 8, 2}, 
    {2, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 4, 0, 0, 0, 0, 4, 8, 0, 8, 0, 2}, 
    {2, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 4, 0, d, 0, 4, 8, 0, 8, 0, 8, 2}, 
    {2, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 4, 0, 0, 0, 4, 0, 8, 0, 8, 0, 2}, 
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
  }, 
  //lvl 13
  {
    {4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2}, 
    {4, 0, 0, 0, 4, 0, 9, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {4, 0, 0, 0, 4, 9, 0, 9, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {4, 0, 0, 0, 4, 0, 9, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {4, 0, 0, 0, 4, 9, 0, 9, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 4, 2}, 
    {2, 4, 0, 0, 0, 4, 9, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 4, 2}, 
    {2, 4, 0, 0, 0, 4, 0, 9, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {2, 4, 0, 0, 0, 4, 9, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {2, 7, 4, 0, 0, 0, 4, 9, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 4, 2}, 
    {2, 0, 4, 0, 0, 0, 4, 0, 2, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 8, 0, 4, 2}, 
    {2, 7, 0, 4, 0, 0, 0, 4, 2, 0, 0, 2, 0, 7, 0, 4, 4, 0, 0, 0, 0, l, 0, 4, 2}, 
    {2, 0, 7, 4, 0, 0, 0, 4, 4, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2}, 
    {2, 7, 0, 7, 4, 0, 0, 0, 4, 0, 0, u, 2, 7, 4, 0, 0, 0, 0, 0, 0, 0, 4, 8, 2}, 
    {2, 0, 7, 0, 7, 4, 0, 0, 0, 4, 0, 0, 2, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 2}, 
    {2, 7, 0, 7, 0, 4, 0, 0, 0, 4, 0, 0, 2, 7, 4, 0, 0, 0, 0, 4, 0, 0, 4, 8, 2}, 
    {2, 0, 7, 0, 7, 4, 0, 0, 0, 4, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 4, 8, 0, 2}, 
    {2, 7, 0, 7, 0, 4, 0, 0, 0, 4, 0, 0, 4, 7, 4, 0, 0, 0, 0, 0, 0, 4, 0, 8, 2}, 
    {2, 0, 7, 0, 7, 4, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 8, 0, 2}, 
    {2, 7, 0, 7, 0, 4, 0, 0, 0, 0, 0, 0, 4, 7, 4, 0, 0, 0, 0, 0, 4, 8, 0, 8, 2}, 
    {2, 0, 7, 0, 7, 4, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 4, 8, 0, 8, 0, 2}, 
    {2, 7, 0, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 0, 0, 0, 4, 0, 8, 0, 8, 2}, 
    {2, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 4, 0, 0, 0, 0, 4, 8, 0, 8, 0, 2}, 
    {2, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 4, 0, d, 0, 4, 8, 0, 8, 0, 8, 2}, 
    {2, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 4, 0, 3, 0, 4, 0, 8, 0, 8, 0, 2}, 
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
  }, 
  //lvl 14
  {
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
    {2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 2}, 
    {2, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 7, 0, 0, 7, 7, 7, 0, 2}, 
    {2, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 7, 0, 0, 7, 7, 7, 0, 0, 7, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 7, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 2}, 
    {2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 2}, 
    {2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 3, 3, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2}, 
    {2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 2}, 
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
  }, 
  //lvl 15
  {
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
    {2, d, d, d, d, d, l, l, l, l, l, l, l, l, l, l, l, l, l, l, l, l, l, l, 2}, 
    {2, 0, 0, 0, 0, 0, 2, u, 2, 2, 2, u, 2, u, 2, u, 2, u, 2, u, u, u, u, u, 2}, 
    {2, 0, 0, 0, 0, 0, 2, u, 0, 0, 2, u, 2, u, 2, u, 2, u, 2, 0, 4, 4, 4, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, k, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 4, 0, 0, 0, 4, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2, u, l, u, r, u, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, r, r, u, u, l, 2, 0, 0, 2, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 2, l, l, r, r, u, 2, 0, 0, 5, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 2, 5, 2, 0, 2, u, l, u, l, r, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, l, u, r, u, u, 2, 4, 0, 0, 0, 4, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 2, r, u, r, l, r, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, r, r, u, r, l, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2, r, l, u, r, l, 2, 0, 0, 4, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, r, l, u, l, l, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, r, u, r, u, l, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, l, r, u, l, u, 2, 4, 0, 0, 0, 4, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 2, r, u, l, u, u, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 2, 2, u, 2, u, 2, u, 2, 0, 0, 0, 0, 0, 2}, 
    {2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2}, 
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, 
  }, 
  //lvl 16
  {
    {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4}, 
    {4, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, d, 0, 0, 0, 0, 0, 0, 0, 0, 4}, 
    {4, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, d, 0, 0, 0, 0, 0, 0, 0, 0, 4}, 
    {4, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, d, 0, 0, 0, 0, 0, 0, 4, 0, 4}, 
    {4, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, d, 0, 0, 0, 0, 0, 0, 0, 0, 4}, 
    {4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, d, 0, 2, 0, 0, 0, 0, 0, 0, 4}, 
    {4, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, d, 2, 0, 0, 0, 0, 0, 0, 0, 4}, 
    {4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, d, 0, 0, 0, 0, 0, 0, 0, 0, 4}, 
    {4, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, d, 0, l, l, l, l, l, l, l, 4}, 
    {4, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4}, 
    {4, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4}, 
    {4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 2, 4, 0, 0, 0, 0, 2, 0, 0, 4}, 
    {4, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 2, 0, 4}, 
    {4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 4}, 
    {4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4}, 
    {4, 2, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 4, 4, 4, 2, 0, 0, 0, 0, 0, 0, 4}, 
    {4, 0, 2, 0, 0, 0, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 0, 0, 0, 0, 4, 0, 0, 4}, 
    {4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4}, 
    {4, r, r, r, r, r, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, u, 0, 0, 0, 0, 0, 0, 4}, 
    {4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0, 0, 2, u, 0, 0, 4, 0, 0, 0, 4}, 
    {4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, u, 0, 0, 0, 4, 0, 0, 4}, 
    {4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, u, 0, 0, 0, 0, 0, 0, 4}, 
    {4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 0, u, 0, 0, 0, 0, 0, 0, 4}, 
    {4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, u, 0, 0, 0, 0, 0, 0, 4}, 
    {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4}, 
  }, 
};
float slide=0.9;
int win=0;
int levels=0;
int d_d=0;
int a_a=0;
int s_s=0;
int w_w=0;
int s_sp=0;
int[] key_log;
int[] skip={1,3,1,3,2,4,2,4,5,5};
float[] ball_size={10, 10, 10, 10, 10, 10, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10};
int mode=1;

// initial setup, runs once
void setup() {
  
  myPort = new Serial(this, "COM3", 9600); // you’l have to change the 2nd parameter to what port your arduino is connected to
  
  size(1280, 720);  // leave as-is, lots of things are hardcoded to this resolution
  key_log=new int[10];
  p=new Player();
  p.prep();
  frameRate(60);
  myPort.bufferUntil('\n');

}

// main program loop
void draw() {
  //serialEvent(myPort);
  
  switch (game_state) {
    
    // main menu game state
    case 0:
      drawMainMenu();
      
      arduino_val = 1;  // send signal to Arduino to display to LCD
      
      // draw selection arrows based on current menu item
      textAlign(LEFT);
      PFont arrow_font = createFont("Showcard Gothic", 144);
      textFont(arrow_font);
      fill(62, 9, 155);
      text(">                       <", width / 5 - 5, current_menu[menu_item]);
      
      // move menu arrows based on joystick direction
      switch (direction) {
        case 'D':
          if (menu_item >= game_list.length - 1)
            menu_item = game_list.length - 1;
          else
            menu_item++;
          break;
          
        case 'U':
          if (menu_item <= 0)
            menu_item = 0;
          else
            menu_item--;
          break;
      }
      
      // button clicked so go to new game state based on current selection
      if (blue_btn == '0') {
        game_state = game_list[menu_item].getID();
        delay(100);
      }
      
      delay(50);  // delay so that selection arrows don't jump too quickly 
      
      break;
    
    // calibration game state 
    case 1:
      
      drawCalibrateHUD();
      
      arduino_val = 2;  // send signal to Arduino to test LCD
      
      // test joystick input
      int x_joystick = width / 3, y_joystick = height / 5 * 3, offset = 72;
      
      switch (direction) {
        case 'U':
          y_joystick -= offset;
          break;
        case 'D':
          y_joystick += offset;
          break;
        case 'L':
          x_joystick -= offset;
          break;
        case 'R':
          x_joystick += offset;
          break;
      }
      fill(22, 22, 22);
      ellipse(x_joystick, y_joystick, width / 5, width / 5);
      
      // test blue button input
      if (blue_btn == '0') {
        fill(32, 45, 191);
        ellipse(width / 5 * 3.5, height / 5 * 3, 108, 108);
      }
      // test black button input
      if (black_btn == '0') {
        fill(15, 16, 17);
        ellipse(width / 5 * 4, height / 2.5, 108, 108);
      }
      
      break;
    
    // first game game state
    case 2:
      
      drawBlackjackHUD();
      arduino_val = 3;  // send signal to Arduino to display to LCD
      
      // prevent player from changing bet after starting a game
      if (!already_hit) {
        
        // reset bet if more than user has in bank
        if (bet >= money) {
           bet = 100;
        }
        
        // determine if bet was incremented or decremented
        switch (direction) {
          case 'U':
            if (money - (bet + 100) > 0)
              bet += 100;
            break;
          case 'D':
            if (money - (bet + 100) >= 0 && bet >= 100)
              bet -= 100;
            break;
        }
        delay(100);
      }
      
      // game isn't over, continue playing
      if (!game_over) {
      
        // blue/hit button
        if (blue_btn == '0') {
          fill(32, 45, 191);
          ellipse(width / 5 * 1.5, height / 5 * 4.525, 108, 108);
          
          already_hit = true;
          
          // players draws a card
          dealer_card = shuffled_dealer_cards[current_card_index];
          current_card = shuffled_cards[current_card_index];
          
          // determine value of an ace card
          if (dealer_card == 0) {
            dealer_card = cardWasAce(dealer);
            dealer += dealer_card;
          }
          else {
            dealer += dealer_card;
          }
          
          if (current_card == 0) {
            current_card = cardWasAce(current_val); 
            current_val += current_card;
          }
          else {
            current_val += current_card;
          }
          
          drawn_cards[current_card_index] = current_card;
          
          current_card_index++;
          delay(200);
        }
        
        // black/stand button
        if (black_btn == '0') {
          fill(15, 16, 17);
          ellipse(width / 5 * 4.5, height / 5 * 4.525, 108, 108);
          
          // dealer's last move...
          
          // dealer more than threshold, stands as well
          if (dealer > 17) {
            // dealer wins when equal or greater to player cards
            if (dealer >= current_val) {
              money -= bet;
              // you lose
              //while (blue_btn == '1') {
                // until player presses blue button, "pause" game
              //}
              //resetBlackjack();
              game_over = true;
              //delay(5000);
            }
            // dealer had less cards than player
            else {
              money += bet;
              // you win!
              //while (blue_btn == '1') {
                // until player presses blue button, "pause" game
              //}
              //resetBlackjack();
              game_over = true;
              //delay(5000);
            }
          }
          else {
            
            // dealer draws cards until over threshold
            while (dealer < 17) {
              
              // dealer draws a card
              dealer_card = shuffled_dealer_cards[current_card_index];
              
              // determine value of an ace card
              if (dealer_card == 0) {
                dealer += cardWasAce(dealer);
              }
              else {
                dealer += dealer_card;
              }

              current_card_index++;
            }
            game_over = true;
          }
          delay(200);
        }
        
        if (current_val == 21 || dealer > 21) {
          money += bet;
          // you win!
          game_over = true;
        }
        if (current_val > 21 || dealer == 21) {
          money -= bet;
          // you lose
          game_over = true;
        }
      }
      
      // user ready for next game
      if (game_reset == true) {
        resetBlackjack();
      }
      
      // game finished, wait for restart input
      if (game_over) {
        // button fonts
        PFont report_font = createFont("Impact", 144);
        fill(21, 21, 21);
        textFont(report_font);
        text("Click to play...", width / 18, height / 6);
        
        if (mousePressed) {
          game_reset = true;
        }
      }
      
      break;
    case 3:
      background(51);
      //background(R_VAL, G_VAL, B_VAL);
      
      arduino_val = 4;  // send signal to Arduino to display to LCD
      
      // port game controls with joystick
      switch (direction) {
        case 'C':
          s_sp=0;
          key_logAdd(3);
          w_w=0;
          key_logAdd(1);
          d_d=0;
          key_logAdd(4);
          a_a=0;
          key_logAdd(2);
          break;
        case 'U':
          w_w=1;
          s_sp=0;
          key_logAdd(3);
          d_d=0;
          key_logAdd(4);
          a_a=0;
          key_logAdd(2);
          break;
        case 'D':
          s_sp=1;
          w_w=0;
          key_logAdd(1);
          d_d=0;
          key_logAdd(4);
          a_a=0;
          key_logAdd(2);
          break;
        case 'L':
          a_a=1;
          w_w=0;
          key_logAdd(1);
          s_sp=0;
          key_logAdd(3);
          d_d=0;
          key_logAdd(4);
          break;
        case 'R':
          d_d=1;
          w_w=0;
          key_logAdd(1);
          s_sp=0;
          key_logAdd(3);
          a_a=0;
          key_logAdd(2);
          break;
      }
      
      
      // port jump to blue button
      if (blue_btn == '0') {
        s_s=1;
      }
      else {
        s_s=0;
        p.sd=1;
      }
      
      // port reset to blue button
      if (black_btn == '0') {
        p.prep();
      }
      else {
        key_logAdd(5); 
      }
      
      // up on joystick and black button goes to main menu
      if (direction == 'U' && black_btn == '0') {
        p.prep();
        levels = 0;
        noStroke();
        game_state = 0;
      }
      
      p.move();
      p.show();
      if(key_log[0]==skip[0]&&key_log[1]==skip[1]&&key_log[2]==skip[2]&&key_log[3]==skip[3]&&key_log[4]==skip[4]&&key_log[5]==skip[5]&&key_log[6]==skip[6]&&key_log[7]==skip[7]
      &&key_log[8]==skip[8]&&key_log[9]==skip[9]){
        win=1;
        key_log=new int[10];
      }
      if (win==1) {
        levels++;
        R_VAL = int(random(255));
        G_VAL = int(random(255));
        B_VAL = int(random(255));
        if (levels==level.length) {
          //println(millis());
        }
        levels=levels%level.length;
        win=0;
        p.prep();
      }
      
      // draw the level number
      PFont level_font = createFont("Impact", 48);
      fill(21, 21, 21);
      textFont(level_font);
      text("Level: " + levels + 1, 64, 64);
      
      break;
  }


  //background(0);
  //rect(5, 5, 5, 5);
  
  //text(val, 10, 100);
  /*
  if (myPort.available() > 0) {
    val = myPort.readStringUntil('\n');
    //if (val != null)
      val = trim(val);
  }
  
  if (mousePressed == true) {
    myPort.write('1');
    //println("1");
  }
  else {
    myPort.write('0'); //write 0 as char to arduino
  }
  
  println(val);
  textSize(20);
  if (val != null)
    text(val, 10, 100);
  */
}


/* ------------ CUSTOM FUNCTIONS ------------ */

// function for Processing/Arduino communication
// taken from: https://learn.sparkfun.com/tutorials/connecting-arduino-to-processing/all
void serialEvent(Serial myPort) {
  //put the incoming data into a String - 
  //the '\n' is our end delimiter indicating the end of a complete packet
  val = myPort.readStringUntil('\n');
  //make sure our data isn't empty before continuing
  if (val != null) {
    //trim whitespace and formatting characters (like carriage return)
    val = trim(val);
    println(val);
  
    //look for our 'A' string to start the handshake
    //if it's there, clear the buffer, and send a request for data
    if (firstContact == false) {
      if (val.equals("A")) {
        myPort.clear();
        firstContact = true;
        myPort.write("A");
        println("contact");
      }
    }
    else { //if we've already established contact, keep getting and parsing data
      println(val);
      
      // separate inputs
      direction = val.charAt(0);
      blue_btn = val.charAt(1);
      black_btn = val.charAt(2);
      
      //if we clicked in the window
      if (mousePressed == true) {
        arduino_val = 1;
        //myPort.write(1);        //send a 1
        //println("1");
      }
      
      myPort.write(arduino_val);
      
      // when you've parsed the data you have, ask for more:
      myPort.write("A");
      }
    }
}

// mousePressed override
void mousePressed() {
  //myPort.write("click");
}

// if space bar was pressed, return to main menu (game state 0)
void keyPressed() {
  if (game_state != 3 && key == ' ') {
    game_state = 0;
    key = '/';  // "reset" the key so that next space bar press is clear
  }
  if (key==' ') {
    s_s=1;
  }
  if (key=='r') {
    p.prep();
  }
  if (key=='R') {
    p.prep();
  }
  if (key=='a') {
    a_a=1;
  }
  if (key=='d') {
    d_d=1;
  }
  if (key=='w') {
    w_w=1;
  }
  if (key=='s') {
    s_sp=1;
  }
  if (key=='A') {
    a_a=1;
  }
  if (key=='D') {
    d_d=1;
  }
  if (key=='W') {
    w_w=1;
  }
  if (key=='S') {
    s_sp=1;
  }
  if (keyCode==LEFT) {
    a_a=1;
  }
  if (keyCode==RIGHT) {
    d_d=1;
  }
  if (keyCode==UP) {
    w_w=1;
  }
  if (keyCode==DOWN) {
    s_sp=1;
  }
}

// draw the main menu
void drawMainMenu() {
  // draw the background for the main menu
  menu_bg = loadImage("menu/bg.png");
  image(menu_bg, 0, 0);
  
  int y = 0;  // height for each item
  
  pushMatrix();
    // loop through each game in game list
    for (Game g : game_list) {
      drawGames(g, y);  // draw the game menu
      y += 96;  // increment the next item's height
    }
  popMatrix();
}

// create the tabs for each game in game list
void drawGames(Game g, int y) {
  int offset = height / 12;
  PFont font = createFont("Showcard Gothic", 52);
  textFont(font);
  textAlign(CENTER);
  fill(36, 24, 51);
  stroke(0);
  strokeWeight(5);
  rect(width / 4, height / 12 + y, width / 2, height / 10);
  fill(101, 71, 140);
  text(g.getTitle(), width / 2, height / 12 + y + offset);
}


// draw the calibration heads up display
void drawCalibrateHUD() {
  // draw the background for the main menu
  calibrate_bg = loadImage("calibrate/bg.png");
  image(calibrate_bg, 0, 0);
  
  strokeWeight(5);
  fill(145, 145, 145);
  ellipse(width / 3, height / 5 * 3, width / 5, width / 5);
  
  fill(89, 102, 247);
  ellipse(width / 5 * 3.5, height / 5 * 3, 108, 108);
  
  fill(38, 39, 45);
  ellipse(width / 5 * 4, height / 2.5, 108, 108);
  
  fill(28, 162, 234);
  rect(width / 2 + 24, height / 10, width / 3 + 72, height / 8);
  
  fill(239, 239, 239);
  PFont digital_font = createFont("Courier New", 72);
  textFont(digital_font);
  text(">> Test <<", width / 2 + 48, height / 8 + 48);
}

// draw the blackjack heads up display
void drawBlackjackHUD() {
  
  background(34, 99, 10);  // green background color
  
  // ui text
  fill(239, 239, 239);
  PFont ui_font = createFont("Segoe UI", 48);
  textFont(ui_font);
  text("Bank:", width / 5 * 3, height / 10);
  text("Bet:", width / 5 * 3, height / 10 + 64);
  text("$" + money, width / 5 * 3.75, height / 10);
  text("$" + bet, width / 5 * 3.75, height / 10 + 64);
  //text(dealer, width / 5 * 3.75 + 100, height / 10 + 128);
  
  strokeWeight(1);
  
  // draw stack of cards
  for (int i = 0; i < 52; i++) {
    //pushMatrix();
      rect(width / 20 + i * 8, height / 16, 172, 256);
    //popMatrix();
  }
  
  ui_font = createFont("Segoe UI", 100);
  textFont(ui_font);
  
  // draw already drawn cards
  for (int i = 0; i < drawn_cards.length; i++) {
    if (drawn_cards[i] != -1) {
      fill(239, 239, 239);
      rect(width / 20 + (200 * i), height / 2 - 32, 172, 256);
      fill(21, 21, 21);
      text(drawn_cards[i], width / 20 + (200 * i), height / 2 + 172);
    }
  }
  
  ui_font = createFont("Segoe UI", 100);
  textFont(ui_font);
  fill(21, 21, 21);
  text(dealer, width / 20 + 424, height / 12 + 224);
  
  // button fonts
  PFont button_font = createFont("Impact", 144);
  textFont(button_font);
  text("HIT", width / 18, height / 5 * 4.5 + 64);
  text("STAND", width / 1.9, height / 5 * 4.5 + 64);
  
  // blue/hit button
  fill(89, 102, 247);
  ellipse(width / 5 * 1.5, height / 5 * 4.525, 108, 108);
  
  // black/stand button
  fill(38, 39, 45);
  ellipse(width / 5 * 4.5, height / 5 * 4.525, 108, 108);
  
  // blackjack number text and font
  fill(21, 21, 21);
  PFont value_font = createFont("Showcard Gothic", 384);
  textFont(value_font);
  text(current_val, width / 3 * 2, height / 3 * 2);
}

// array shuffling algorithm
// taken from: https://www.programcreek.com/2012/02/java-method-to-shuffle-an-int-array-with-random-order/
int[] shuffle(int[] array) {     
 
    for (int i = 0; i < array.length; i++) {
        int randomPosition = int(random(array.length));
        int temp = array[i];
        array[i] = array[randomPosition];
        array[randomPosition] = temp;
    }
 
    return array;
}

// if drawn card was an ace, determine its value
int cardWasAce(int points) {
  if (points > 10)
    return 1;
  else
    return 11;
}

// reset blackjack values and reshuffle cards for next game
void resetBlackjack() {
  
  // player is broke, quit to main menu
  if (money <= 0) {
    game_state = 0;
    money = 1000;
    bet = 100;
  }
  
  // player still has money in bank
  else {
    shuffled_cards = shuffle(shuffled_cards);
    shuffled_dealer_cards = shuffle(shuffled_dealer_cards);
    current_card_index = 0;
    dealer = 0;
    dealer_card = -1;
    current_val = 0;
    current_card = -1;
    already_hit = false;
    game_reset = false;
    game_over = false;
    
    for (int i = 0; i < drawn_cards.length; i++) {
      drawn_cards[i] = -1;
    }
  }
}


void keyReleased() {
  if (key==' ') {
    s_s=0;
    p.sd=1;
  }
  if (key=='a') {
    a_a=0;
    key_logAdd(2);
  }
  if (key=='w') {
    w_w=0;
    key_logAdd(1);
  }
  if (key=='s') {
    s_sp=0;
    key_logAdd(3);
  }
  if (key=='d') {
    d_d=0;
    key_logAdd(4);
  }
  if (key=='A') {
    a_a=0;
    key_logAdd(2);
  }
  if (key=='W') {
    w_w=0;
    key_logAdd(1);
  }
  if (key=='S') {
    s_sp=0;
    key_logAdd(3);
  }
  if (key=='D') {
    d_d=0;
    key_logAdd(4);
  }
  if (keyCode==LEFT) {
    a_a=0;
    key_logAdd(2);
  }
  if (keyCode==RIGHT) {
    d_d=0;
    key_logAdd(4);
  }
  if (keyCode==UP) {
    w_w=0;
    key_logAdd(1);
  }
  if (keyCode==DOWN) {
    s_sp=0;
    key_logAdd(3);
  }
  if(key=='r' || key=='R'){
    key_logAdd(5);
  }
}
/*void keyPressed() {
  if (key==' ') {
    s_s=1;
  }
  if (key=='r') {
    p.prep();
  }
  if (key=='R') {
    p.prep();
  }
  if (key=='a') {
    a_a=1;
  }
  if (key=='d') {
    d_d=1;
  }
  if (key=='w') {
    w_w=1;
  }
  if (key=='s') {
    s_sp=1;
  }
  if (key=='A') {
    a_a=1;
  }
  if (key=='D') {
    d_d=1;
  }
  if (key=='W') {
    w_w=1;
  }
  if (key=='S') {
    s_sp=1;
  }
  if (keyCode==LEFT) {
    a_a=1;
  }
  if (keyCode==RIGHT) {
    d_d=1;
  }
  if (keyCode==UP) {
    w_w=1;
  }
  if (keyCode==DOWN) {
    s_sp=1;
  }
}*/


/* ------------ CLASS OBJECTS ------------ */

// general game object
class Game {
  private int game_id;
  private String game_title;
  
  // constructor
  public Game(int id, String title) {
    game_id = id;
    game_title = title;
  }
  
  // id getter
  public int getID() {
   return game_id; 
  }
  
  // title getter
  public String getTitle() {
   return game_title; 
  }
  
}


class Player {
  PVector pos;
  PVector vel=new PVector(0, 0);
  PVector acc=new PVector(0, 0);
  PVector maxvel=new PVector(ball_size[levels]/2, ball_size[levels]/2);
  int p=0;
  int sd=1;
  //movement speed
  float mm=2;
  //gravity
  float g=1;
  float hg=0;
  float bounce=0.5;
  float bounce_2=1.5;
  void prep() {
    maxvel=new PVector(ball_size[levels]/2, ball_size[levels]/2);
    for (int i=0; i<level[levels].length; i++) {
      for (int j=0; j<level[levels][i].length; j++) {
        if (level[levels][i][j]==1) {
          pos=new PVector((width/level[levels][i].length)*j+(width/level[levels][i].length)/2, (height/level[levels].length)*i+(height/level[levels].length)/2);
          vel.x=0;
          vel.y=0;
          g=1;
          hg=0;
          return;
        }
      }
    }
  }
  void move() {
    if (keyPressed==false) {
      if (g!=0) {
        float save=vel.y;
        vel.set(vel.x*slide, save);
      } else {
        float save=vel.x;
        vel.set(save, vel.y*slide);
      }
    }
    PVector att=new PVector(pos.x, pos.y);
    int k=0;
    if ((d_d==1)&&(g!=0)) {
      att.add(mm, 0);
      att.sub(pos);
      k=1;
    }
    if ((a_a==1)&&(g!=0)) {
      att.add(-mm, 0);
      att.sub(pos);
      k=1;
    }
    if ((w_w==1)&&(hg!=0)) {
      att.add(0, -mm);
      att.sub(pos);
      k=1;
    }
    if ((s_sp==1)&&(hg!=0)) {
      att.add(0, mm);
      att.sub(pos);
      k=1;
    }
    if ((s_s==1)&&(sd==1)) {
      g*=-1;
      hg*=-1;
      sd=0;
    }
    if (k==0) {
      att.sub(pos);
    }
    if (g!=0) {
      acc.set(att.x, 0);
    } else {
      acc.set(0, att.y);
    }
    if (mode==0) {
      acc.add(hg, g);
    }
    acc.setMag(0.5);
    if (mode==1) {
      acc.add(hg, g);
    }
    vel.add(acc);
    if (vel.x>maxvel.x) {
      vel.x=maxvel.x;
    }
    if (vel.y>maxvel.y) {
      vel.y=maxvel.y;
    }
    if (vel.x<-maxvel.x) {
      vel.x=-maxvel.x;
    }
    if (vel.y<-maxvel.y) {
      vel.y=-maxvel.y;
    }
    vel.div(hitboxCheck);
    for (int lo=0; lo<hitboxCheck; lo++) {
      pos.add(vel);
      hitbox();
    }
    vel.mult(hitboxCheck);
    if (pos.x<0) {
      prep();
    }
    if (pos.x>width) {
      prep();
    }
    if (pos.y<0) {
      prep();
    }
    if (pos.y>height) {
      prep();
    }
    int gs=0;
    for (int i=0; i<level[levels].length; i++) {
      for (int j=0; j<level[levels][i].length; j++) {
        if (level[levels][i][j]==5) {
          gs=1;
        }
      }
    }

    if (gs==0) {
      for (int i=0; i<level[levels].length; i++) {
        for (int j=0; j<level[levels][i].length; j++) {
          if (level[levels][i][j]==6) {
            level[levels][i][j]=3;
          }
        }
      }
    } else {
      for (int i=0; i<level[levels].length; i++) {
        for (int j=0; j<level[levels][i].length; j++) {
          if (level[levels][i][j]==3) {
            level[levels][i][j]=6;
          }
        }
      }
    }
    //-------------------------------
    gs=0;
    for (int i=0; i<level[levels].length; i++) {
      for (int j=0; j<level[levels][i].length; j++) {
        if (level[levels][i][j]==15) {
          gs=1;
        }
      }
    }

    if (gs==0) {
      for (int i=0; i<level[levels].length; i++) {
        for (int j=0; j<level[levels][i].length; j++) {
          if (level[levels][i][j]==14) {
            level[levels][i][j]=-14;
          }
        }
      }
    } else {
      for (int i=0; i<level[levels].length; i++) {
        for (int j=0; j<level[levels][i].length; j++) {
          if (level[levels][i][j]==-14) {
            level[levels][i][j]=14;
          }
        }
      }
    }

    if (frameCount%60==0) {
      for (int i=0; i<level[levels].length; i++) {
        for (int j=0; j<level[levels][i].length; j++) {
          if ((level[levels][i][j]==9)||(level[levels][i][j]==8)) {
            if (level[levels][i][j]==8) {
              level[levels][i][j]=9;
            } else {
              level[levels][i][j]=8;
            }
          }
        }
      }
    }
  }
  void hitbox() {
    for (int i=0; i<level[levels].length; i++) {
      for (int j=0; j<level[levels][i].length; j++) {
        //block
        if ((level[levels][i][j]==2)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y+(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y+(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          pos.set(pos.x, (height/level[levels].length)*i-(ball_size[levels]/2+1));
          vel.y*=-bounce;
        }
        if ((level[levels][i][j]==2)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y-(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y-(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          pos.set(pos.x, (height/level[levels].length)*(i+1)+(ball_size[levels]/2+1));
          vel.y*=-bounce;
        }
        if ((level[levels][i][j]==2)&&(pos.x+(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x+(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          pos.set((width/level[levels][i].length)*j-(ball_size[levels]/2+1), pos.y);
          vel.x*=-bounce;
        }
        if ((level[levels][i][j]==2)&&(pos.x-(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x-(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          pos.set((width/level[levels][i].length)*(j+1)+(ball_size[levels]/2+1), pos.y);
          vel.x*=-bounce;
        }
        //change block
        if ((level[levels][i][j]==8)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y+(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y+(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          pos.set(pos.x, (height/level[levels].length)*i-(ball_size[levels]/2+1));
          vel.y*=-bounce;
        }
        if ((level[levels][i][j]==8)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y-(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y-(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          pos.set(pos.x, (height/level[levels].length)*(i+1)+(ball_size[levels]/2+1));
          vel.y*=-bounce;
        }
        if ((level[levels][i][j]==8)&&(pos.x+(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x+(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          pos.set((width/level[levels][i].length)*j-(ball_size[levels]/2+1), pos.y);
          vel.x*=-bounce;
        }
        if ((level[levels][i][j]==8)&&(pos.x-(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x-(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          pos.set((width/level[levels][i].length)*(j+1)+(ball_size[levels]/2+1), pos.y);
          vel.x*=-bounce;
        }
        //death
        if ((level[levels][i][j]==4)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y+(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y+(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          for (int l=0; l<level[levels].length; l++) {
            for (int o=0; o<level[levels][l].length; o++) {
              if (level[levels][l][o]==-1) {
                level[levels][l][o]=5;
              }
              if (level[levels][l][o]==-15) {
                level[levels][l][o]=15;
              }
            }
          }
          g=1;
          hg=0;
          prep();
          vel.set(0, 0);
        }
        if ((level[levels][i][j]==4)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y-(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y-(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          for (int l=0; l<level[levels].length; l++) {
            for (int o=0; o<level[levels][l].length; o++) {
              if (level[levels][l][o]==-1) {
                level[levels][l][o]=5;
              }
              if (level[levels][l][o]==-15) {
                level[levels][l][o]=15;
              }
            }
          }
          g=1;
          hg=0;
          prep();
          vel.set(0, 0);
        }
        if ((level[levels][i][j]==4)&&(pos.x+(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x+(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          for (int l=0; l<level[levels].length; l++) {
            for (int o=0; o<level[levels][l].length; o++) {
              if (level[levels][l][o]==-1) {
                level[levels][l][o]=5;
              }
              if (level[levels][l][o]==-15) {
                level[levels][l][o]=15;
              }
            }
          }
          g=1;
          hg=0;
          prep();
          vel.set(0, 0);
        }
        if ((level[levels][i][j]==4)&&(pos.x-(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x-(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          for (int l=0; l<level[levels].length; l++) {
            for (int o=0; o<level[levels][l].length; o++) {
              if (level[levels][l][o]==-1) {
                level[levels][l][o]=5;
              }
              if (level[levels][l][o]==-15) {
                level[levels][l][o]=15;
              }
            }
          }
          g=1;
          hg=0;
          prep();
          vel.set(0, 0);
        }

        //goal

        if ((level[levels][i][j]==3)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y+(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y+(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          win=1;
          g=1;
          hg=0;
        }
        if ((level[levels][i][j]==3)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y-(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y-(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          win=1;
          g=1;
          hg=0;
        }
        if ((level[levels][i][j]==3)&&(pos.x+(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x+(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          win=1;
          g=1;
          hg=0;
        }
        if ((level[levels][i][j]==3)&&(pos.x-(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x-(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          win=1;
          g=1;
          hg=0;
        }

        //key
        if ((level[levels][i][j]==5)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y+(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y+(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          level[levels][i][j]=-1;
        }
        if ((level[levels][i][j]==5)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y-(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y-(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          level[levels][i][j]=-1;
        }
        if ((level[levels][i][j]==5)&&(pos.x+(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x+(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          level[levels][i][j]=-1;
        }
        if ((level[levels][i][j]==5)&&(pos.x-(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x-(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          level[levels][i][j]=-1;
        }

        //bounce pad
        if ((level[levels][i][j]==7)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y+(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y+(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          vel.y=-maxvel.y;
          vel.y*=bounce_2;
        }
        if ((level[levels][i][j]==7)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y-(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y-(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          vel.y=maxvel.y;
          vel.y*=bounce_2;
        }
        if ((level[levels][i][j]==7)&&(pos.x+(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x+(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          vel.x=-maxvel.x;
          vel.x*=bounce_2;
        }
        if ((level[levels][i][j]==7)&&(pos.x-(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x-(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          vel.x=maxvel.x;
          vel.x*=bounce_2;
        }

        //gravity change

        //change up
        if ((level[levels][i][j]==10)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y+(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y+(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          g=-1;
          hg=0;
        }
        if ((level[levels][i][j]==10)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y-(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y-(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          g=-1;
          hg=0;
        }
        if ((level[levels][i][j]==10)&&(pos.x+(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x+(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          g=-1;
          hg=0;
        }
        if ((level[levels][i][j]==10)&&(pos.x-(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x-(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          g=-1;
          hg=0;
        }
        //change right
        if ((level[levels][i][j]==11)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y+(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y+(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          g=0;
          hg=1;
        }
        if ((level[levels][i][j]==11)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y-(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y-(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          g=0;
          hg=1;
        }
        if ((level[levels][i][j]==11)&&(pos.x+(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x+(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          g=0;
          hg=1;
        }
        if ((level[levels][i][j]==11)&&(pos.x-(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x-(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          g=0;
          hg=1;
        }
        //change down
        if ((level[levels][i][j]==12)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y+(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y+(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          g=1;
          hg=0;
        }
        if ((level[levels][i][j]==12)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y-(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y-(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          g=1;
          hg=0;
        }
        if ((level[levels][i][j]==12)&&(pos.x+(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x+(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          g=1;
          hg=0;
        }
        if ((level[levels][i][j]==12)&&(pos.x-(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x-(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          g=1;
          hg=0;
        }
        //change left
        if ((level[levels][i][j]==13)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y+(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y+(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          g=0;
          hg=-1;
        }
        if ((level[levels][i][j]==13)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y-(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y-(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          g=0;
          hg=-1;
        }
        if ((level[levels][i][j]==13)&&(pos.x+(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x+(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          g=0;
          hg=-1;
        }
        if ((level[levels][i][j]==13)&&(pos.x-(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x-(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          g=0;
          hg=-1;
        }
        //gate
        if ((level[levels][i][j]==14)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y+(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y+(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          pos.set(pos.x, (height/level[levels].length)*i-(ball_size[levels]/2+1));
          vel.y*=-bounce;
        }
        if ((level[levels][i][j]==14)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y-(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y-(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          pos.set(pos.x, (height/level[levels].length)*(i+1)+(ball_size[levels]/2+1));
          vel.y*=-bounce;
        }
        if ((level[levels][i][j]==14)&&(pos.x+(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x+(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          pos.set((width/level[levels][i].length)*j-(ball_size[levels]/2+1), pos.y);
          vel.x*=-bounce;
        }
        if ((level[levels][i][j]==14)&&(pos.x-(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x-(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          pos.set((width/level[levels][i].length)*(j+1)+(ball_size[levels]/2+1), pos.y);
          vel.x*=-bounce;
        }
        //gate key
        if ((level[levels][i][j]==15)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y+(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y+(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          if (level[levels][i][j]>0) {
            level[levels][i][j]*=-1;
          }
        }
        if ((level[levels][i][j]==15)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y-(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y-(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          if (level[levels][i][j]>0) {
            level[levels][i][j]*=-1;
          }
        }
        if ((level[levels][i][j]==15)&&(pos.x+(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x+(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          if (level[levels][i][j]>0) {
            level[levels][i][j]*=-1;
          }
        }
        if ((level[levels][i][j]==15)&&(pos.x-(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x-(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          if (level[levels][i][j]>0) {
            level[levels][i][j]*=-1;
          }
        }
        //halt
        if ((level[levels][i][j]==16)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y+(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y+(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          pos.set(pos.x, (height/level[levels].length)*i-(ball_size[levels]/2+1));
          bounce/=10;
          vel.y*=-bounce;
          bounce*=10;
          vel.x*=bounce;
        }
        if ((level[levels][i][j]==16)&&(pos.x>=(width/level[levels][i].length)*j)&&(pos.x<=(width/level[levels][i].length)*(j+1))&&
          (pos.y-(ball_size[levels]/2+1)>=(height/level[levels].length)*i)&&(pos.y-(ball_size[levels]/2+1)<=(height/level[levels].length)*(i+1))) {
          pos.set(pos.x, (height/level[levels].length)*(i+1)+(ball_size[levels]/2+1));
          bounce/=10;
          vel.y*=-bounce;
          bounce*=10;
          vel.x*=bounce;
        }
        if ((level[levels][i][j]==16)&&(pos.x+(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x+(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          pos.set((width/level[levels][i].length)*j-(ball_size[levels]/2+1), pos.y);
          bounce/=10;
          vel.x*=-bounce;
          bounce*=10;
          vel.y*=bounce;
        }
        if ((level[levels][i][j]==16)&&(pos.x-(ball_size[levels]/2+1)>=(width/level[levels][i].length)*j)&&(pos.x-(ball_size[levels]/2+1)<=(width/level[levels][i].length)*(j+1))&&
          (pos.y>=(height/level[levels].length)*i)&&(pos.y<=(height/level[levels].length)*(i+1))) {
          pos.set((width/level[levels][i].length)*(j+1)+(ball_size[levels]/2+1), pos.y);
          bounce/=10;
          vel.x*=-bounce;
          bounce*=10;
          vel.y*=bounce;
        }
      }
    }
  }

  void show() {
    fill(0, 255, 0);
    noStroke();
    ellipse(pos.x, pos.y, ball_size[levels], ball_size[levels]);
    for (int i=0; i<level[levels].length; i++) {
      for (int j=0; j<level[levels][i].length; j++) {
        noFill();
        noStroke();
        if (level[levels][i][j]==2) {
          fill(255);
          stroke(255);
        } else if (level[levels][i][j]==3) {
          fill(0, 255, 0, 100);
          stroke(0, 255, 0, 100);
        } else if (level[levels][i][j]==4) {
          fill(255, 0, 0);
          stroke(255, 0, 0);
        } else if (level[levels][i][j]==5) {
          fill(255, 255, 0, 100);
          stroke(255, 255, 0, 100);
        } else if (level[levels][i][j]==6) {
          fill(0, 0, 255, 100);
          stroke(0, 0, 255, 100);
        } else if (level[levels][i][j]==7) {
          fill(0, 255, 255, 100);
          stroke(0, 255, 255, 100);
        } else if (level[levels][i][j]==8) {
          fill(180, 100, 100);
          stroke(180, 100, 100);
        } else if (level[levels][i][j]==9) {
          fill(180, 100, 50, 100);
          stroke(180, 100, 50, 100);
        } else if (level[levels][i][j]==14) {
          fill(100, 25, 25);
          stroke(100, 25, 25);
        } else if (level[levels][i][j]==15) {
          fill(255, 225, 125);
          stroke(255, 225, 125);
        } else if (level[levels][i][j]==16) {
          fill(0);
          stroke(0);
        } else {
          noFill();
          noStroke();
        }
        rect((width/level[levels][i].length)*j, (height/level[levels].length)*i, (width/level[levels][i].length), (height/level[levels].length));
        if (level[levels][i][j]==10) {
          up((width/level[levels][i].length)*j, (height/level[levels].length)*i, (width/level[levels][i].length), (height/level[levels].length));
        }
        if (level[levels][i][j]==11) {
          right((width/level[levels][i].length)*j, (height/level[levels].length)*i, (width/level[levels][i].length), (height/level[levels].length));
        }
        if (level[levels][i][j]==12) {
          down((width/level[levels][i].length)*j, (height/level[levels].length)*i, (width/level[levels][i].length), (height/level[levels].length));
        }
        if (level[levels][i][j]==13) {
          left((width/level[levels][i].length)*j, (height/level[levels].length)*i, (width/level[levels][i].length), (height/level[levels].length));
        }
      }
    }
  }
}

void left(float x, float y, float w, float h) {
  noStroke();
  strokeWeight(1.5);
  fill(255, 10, 255, 125);
  rect(x, y, w, h);
  fill(0);
  stroke(0);
  line(x, y+(h/2), x+(w/2), y+h);
  line(x+(w/2), y+(h/2), x+w, y+(h/2));
  line(x, y+(h/2), x+(w/2), y);
  line(x+(w/2), y, x+(w/2), y+h);
  noStroke();
}
void up(float x, float y, float w, float h) {
  noStroke();
  strokeWeight(1.5);
  fill(255, 10, 255, 125);
  rect(x, y, w, h);
  fill(0);
  stroke(0);
  line(x, y+(h/2), x+w, y+(h/2));
  line(x+(w/2), y, x, y+(h/2));
  line(x+(w/2), y, x+w, y+(h/2));
  line(x+(w/2), y+(w/2), x+(w/2), y+h);
  noStroke();
}
void down(float x, float y, float w, float h) {
  noStroke();
  strokeWeight(1.5);
  fill(255, 10, 255, 125);
  rect(x, y, w, h);
  fill(0);
  stroke(0);
  line(x, y+(h/2), x+w, y+(h/2));
  line(x+(w/2), y+h, x, y+(h/2));
  line(x+(w/2), y+h, x+w, y+(h/2));
  line(x+(w/2), y+(w/2), x+(w/2), y);
  noStroke();
}
void right(float x, float y, float w, float h) {
  noStroke();
  strokeWeight(1.5);
  fill(255, 10, 255, 125);
  rect(x, y, w, h);
  fill(0);
  stroke(0);
  line(x+w, y+(h/2), x+(w/2), y+h);
  line(x+w, y+(h/2), x+(w/2), y);
  line(x+(w/2), y, x+(w/2), y+h);
  line(x+(w/2), y+(w/2), x, y+(h/2));
  noStroke();
}
void key_logAdd(int num){
  int[] temp_key;
  temp_key=new int[10];
  for(int i=1;i<temp_key.length;i++){
    temp_key[i-1]=key_log[i];
  }
  temp_key[temp_key.length-1]=num;
  key_log=temp_key;
}
